import { Constructor, Executable } from './executable';
/**
 * An interface containing method type signatures for any Action containing a `.name()` method.
 */
export interface SummonerNameChainable {
    name?: <K extends SummonerNameChainable & Executable>(this: K, summonerName: string) => Omit<K, 'name'>;
}
/**
 * A mixin for the `.name()` method.
 * @template TBase The type of the object inside. Inferred from the `Base` parameter.
 * @param Base The target class.
 */
export declare function TakesSummonerName<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /**
         * Modifies the **summonerName** associated with the Action object it is called from.
         * @param summonerName The summoner name to update the calling Action object with.
         */
        name<K extends SummonerNameChainable & Executable>(this: K, summonerName: string): Omit<K, "name">;
    };
} & TBase;
//# sourceMappingURL=summoner-name.d.ts.map