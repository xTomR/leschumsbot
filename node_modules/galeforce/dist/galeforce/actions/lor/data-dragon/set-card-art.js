"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const action_1 = __importDefault(require("../../action"));
const riot_api_1 = require("../../../../riot-api");
const mixins_1 = require("../../mixins");
const BaseAction = mixins_1.TakesVersion(mixins_1.TakesLocale(mixins_1.TakesLorSet(mixins_1.TakesCard(action_1.default))));
class GetLorDataDragonSetCardArt extends BaseAction {
    constructor(submodules, type) {
        super(submodules);
        switch (type) {
            case 'card':
                this.payload.endpoint = riot_api_1.ENDPOINTS.LOR_DATA_DRAGON.SET_CARD_ART;
                break;
            case 'full':
                this.payload.endpoint = riot_api_1.ENDPOINTS.LOR_DATA_DRAGON.SET_CARD_ART_FULL;
                break;
            case 'alt':
                this.payload.endpoint = riot_api_1.ENDPOINTS.LOR_DATA_DRAGON.SET_CARD_ART_ALT;
                break;
            case 'alt-full':
                this.payload.endpoint = riot_api_1.ENDPOINTS.LOR_DATA_DRAGON.SET_CARD_ART_ALT_FULL;
                break;
            default:
                throw new Error('[galeforce]: Invalid constructor parameter provided.');
        }
        this.payload.type = 'lor-ddragon-buffer';
        this.payload.method = 'GET';
    }
}
exports.default = GetLorDataDragonSetCardArt;
//# sourceMappingURL=set-card-art.js.map