/// <reference types="node" />
import Action from '../../action';
import SubmoduleMap from '../../../interfaces/submodule-map';
declare const BaseAction: {
    new (...args: any[]): {
        version<K extends import("../../mixins/version").VersionChainable & import("../../mixins/executable").Executable>(this: K, version: string): Omit<K, "version">;
    };
} & {
    new (...args: any[]): {
        spell<K_1 extends import("../../mixins/spell").SpellChainable & import("../../mixins/executable").Executable>(this: K_1, spell: string): Omit<K_1, "spell">;
    };
} & typeof Action;
export default class GetDataDragonSpellArt extends BaseAction<Buffer> {
    constructor(submodules: SubmoduleMap);
}
export {};
//# sourceMappingURL=spell-art.d.ts.map