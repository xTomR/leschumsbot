"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const action_1 = __importDefault(require("../../action"));
const riot_api_1 = require("../../../../riot-api");
class GetDataDragonScoreboardArt extends action_1.default {
    constructor(submodules, icon) {
        super(submodules);
        switch (icon) {
            case 'champion':
                this.payload.endpoint = riot_api_1.ENDPOINTS.LOL_DATA_DRAGON.SCOREBOARD_ICONS_CHAMPION_ART;
                break;
            case 'items':
                this.payload.endpoint = riot_api_1.ENDPOINTS.LOL_DATA_DRAGON.SCOREBOARD_ICONS_ITEMS_ART;
                break;
            case 'minion':
                this.payload.endpoint = riot_api_1.ENDPOINTS.LOL_DATA_DRAGON.SCOREBOARD_ICONS_MINION_ART;
                break;
            case 'score':
                this.payload.endpoint = riot_api_1.ENDPOINTS.LOL_DATA_DRAGON.SCOREBOARD_ICONS_SCORE_ART;
                break;
            case 'spells':
                this.payload.endpoint = riot_api_1.ENDPOINTS.LOL_DATA_DRAGON.SCOREBOARD_ICONS_SPELLS_ART;
                break;
            default:
                throw new Error('[galeforce]: Invalid constructor parameter provided.');
        }
        this.payload.type = 'lol-ddragon-buffer';
        this.payload.method = 'GET';
    }
}
exports.default = GetDataDragonScoreboardArt;
//# sourceMappingURL=scoreboard-icon-art.js.map