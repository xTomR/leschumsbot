import Action from '../../action';
import { ValorantRegion } from '../../../../riot-api';
import SubmoduleMap from '../../../interfaces/submodule-map';
import { ValLeaderboardDTO } from '../../../interfaces/dto';
declare type GetValorantRankedLeaderboardQuery = {
    size?: number;
    startIndex?: number;
};
declare const BaseAction: {
    new (...args: any[]): {
        actId<K extends import("../../mixins/act-id").ActIdChainable & import("../../mixins/executable").Executable>(this: K, actId: string): Omit<K, "actId">;
    };
} & {
    new (...args: any[]): {
        query<K_1 extends import("../../mixins/query").QueryChainable<GetValorantRankedLeaderboardQuery> & import("../../mixins/executable").Executable>(this: K_1, query: GetValorantRankedLeaderboardQuery): Omit<K_1, "query">;
    };
} & {
    new (...args: any[]): {
        region<K_2 extends import("../../mixins/region").RegionChainable<ValorantRegion> & import("../../mixins/executable").Executable>(this: K_2, region: ValorantRegion): Omit<K_2, "region">;
    };
} & typeof Action;
export default class GetValorantRankedLeaderboard extends BaseAction<ValLeaderboardDTO> {
    constructor(submodules: SubmoduleMap);
}
export {};
//# sourceMappingURL=leaderboard.d.ts.map