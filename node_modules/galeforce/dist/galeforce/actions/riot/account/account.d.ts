import Action from '../../action';
import { AccountDTO } from '../../../interfaces/dto';
import { RiotRegion } from '../../../../riot-api';
import SubmoduleMap from '../../../interfaces/submodule-map';
declare const BaseAction: {
    new (...args: any[]): {
        puuid<K extends import("../../mixins/puuid").PUUIDChainable & import("../../mixins/executable").Executable>(this: K, puuid: string): Omit<K, "puuid">;
    };
} & {
    new (...args: any[]): {
        gameName<K_1 extends import("../../mixins/riot-id").RiotIdChainable & import("../../mixins/executable").Executable>(this: K_1, gameName: string): Omit<K_1, "gameName">;
        tagLine<K_2 extends import("../../mixins/riot-id").RiotIdChainable & import("../../mixins/executable").Executable>(this: K_2, tagLine: string): Omit<K_2, "tagLine">;
    };
} & {
    new (...args: any[]): {
        region<K_3 extends import("../../mixins/region").RegionChainable<RiotRegion> & import("../../mixins/executable").Executable>(this: K_3, region: RiotRegion): Omit<K_3, "region">;
    };
} & typeof Action;
export default class GetAccount extends BaseAction<AccountDTO> {
    constructor(submodules: SubmoduleMap);
    protected inferEndpoint(): void;
}
export {};
//# sourceMappingURL=account.d.ts.map