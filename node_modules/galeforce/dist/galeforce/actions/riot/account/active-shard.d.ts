import Action from '../../action';
import { ActiveShardDTO } from '../../../interfaces/dto';
import { RiotRegion } from '../../../../riot-api';
import SubmoduleMap from '../../../interfaces/submodule-map';
declare const BaseAction: {
    new (...args: any[]): {
        puuid<K extends import("../../mixins/puuid").PUUIDChainable & import("../../mixins/executable").Executable>(this: K, puuid: string): Omit<K, "puuid">;
    };
} & {
    new (...args: any[]): {
        game<K_1 extends import("../../mixins/game").GameChainable & import("../../mixins/executable").Executable>(this: K_1, game: import("../../../../riot-api/enums/games").default): Omit<K_1, "game">;
    };
} & {
    new (...args: any[]): {
        region<K_2 extends import("../../mixins/region").RegionChainable<RiotRegion> & import("../../mixins/executable").Executable>(this: K_2, region: RiotRegion): Omit<K_2, "region">;
    };
} & typeof Action;
export default class GetActiveShard extends BaseAction<ActiveShardDTO> {
    constructor(submodules: SubmoduleMap);
}
export {};
//# sourceMappingURL=active-shard.d.ts.map